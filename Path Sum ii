// Time Complexity : O(N)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<Integer> lst = new ArrayList<>();
        List<List<Integer>> result = new ArrayList<>();
     
        if(root==null){
            return result;
        }
        helper(root,0, sum, lst, result);
        return result;
    }

    public void helper(TreeNode root, int tempSum, int sum, List<Integer> lst, List<List<Integer>> result){
        if(root==null){
            return;
        }
        lst.add(root.val);
        tempSum += root.val;
        if(root.left==null && root.right==null){
            if(tempSum == sum){
                result.add(new ArrayList<>(lst));
                // return;
            }
        }
            // if(root.left!=null){
            //     System.out.println( root.left.val + " | " +  tempSum  + " | " +lst+ " | " +result);
            // }
         helper(root.left, tempSum, sum, lst, result); 
            // if(root.right!=null){
            //     System.out.println( root.right.val + " | " +  tempSum  + " | " +lst+ " | " +result);
            // }
        helper(root.right, tempSum, sum, lst, result);    
        lst.remove(lst.size() - 1);   //IMPORTANT. -> To go back to previous level after checking both leaf nodes i.e to 11 from 7 & 2.
    }
}
